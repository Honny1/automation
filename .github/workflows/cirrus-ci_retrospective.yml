---

# Use the latest published version of the cirrus-ci_retrospective container
# to determine the execution context of _this_ workflow run.  If it is a
# pull request, clone the HEAD used in the PR's Cirrus-CI build.  From the PR
# code, build a test version of the cirrus-ci_retrospective container.  Execute
# the test container against the originating Github Actions event.
# Collect and provide outputs in an archive file for analysis.

on:
    check_suite:  # ALWAYS triggered from the default branch
        # Ref: https://help.github.com/en/actions/reference/events-that-trigger-workflows#check-suite-event-check_suite
        types:
            - completed

# Variables required by multiple jobs/steps
env:
    # Default 'sh' behaves slightly but significantly different
    CIRRUS_SHELL: '/bin/bash'
    # Authoritative Cirrus-CI task to monitor for completion info of all other cirrus-ci tasks.
    MONITOR_TASK: 'cirrus-ci/success'
    # Authoritative Github Action task (in cirrus-ci) to trigger / check for completion of _this_ workflow
    ACTION_TASK: 'github-actions/success'
    # Relative locations to help with safe use and testing
    HELPER_LIB: '.github/lib/cirrus-ci_retrospective.sh'
    HELPER_LIB_TEST: '.github/test/run_action_tests.sh'
    # Enable debugging of github actions itself
    # (see https://help.github.com/en/actions/reference/workflow-commands-for-github-actions#setting-a-debug-message)
    ACTIONS_STEP_DEBUG: '${{ secrets.ACTIONS_STEP_DEBUG }}'
    # Required data for testing ephemeral_gpg container
    TEST_PASSPHRASE: 'ZXBoZW1lcmFsX2dwZ194WExuODY4OWVwaGVtZXJhbF9ncGdfNXJDUDQ4NDQK'
    # There's no easy way to easily include this data from an external file
    TEST_PRIVATE_KEY: |
        -----BEGIN PGP PUBLIC KEY BLOCK-----
        mDMEXvCXXBYJKwYBBAHaRw8BAQdAAZ2SkTVon0o5GOrFeGvyyFzCsD1D/5YaDuft
        lcCDj7i0HkZ1bmt5IFRlYSBPb2xvbmcgPGZvb0BiYXIuYmF6PoiQBBMWCAA4FiEE
        UGx2MeOfMIY1pMpFLnr9QOCSI3YFAl7wl1wCGwMFCwkIBwIGFQoJCAsCBBYCAwEC
        HgECF4AACgkQLnr9QOCSI3aasgD/VoUbtPEGXGnWtXays8tW0LTCBwc3F2FkLLjF
        1zPokpQBAM0YPtTXECK94Ns6Hq4qT9D7Z+QLvkvXAskicYcOTtsOuDgEXvCXXBIK
        KwYBBAGXVQEFAQEHQNhyii6b4ui4sdiDumbh/K1pOEkDAPqf6qiabrRCrWNPAwEI
        B4h4BBgWCAAgFiEEUGx2MeOfMIY1pMpFLnr9QOCSI3YFAl7wl1wCGwwACgkQLnr9
        QOCSI3bEMgD+P6W+phzoImFabaDWykmSO2kOiCQ8rbur+rBEDT2nlLUA/R+7Crq4
        dLvdvPcboSPlDHi8JD5HWyYX20T+zA93HLYHuDMEXvCXXRYJKwYBBAHaRw8BAQdA
        G/VOwqwpgEW/VnNVXH5N8iWOzJ2vDmmTeNpq3OupySGI7wQYFggAIBYhBFBsdjHj
        nzCGNaTKRS56/UDgkiN2BQJe8JddAhsCAIEJEC56/UDgkiN2diAEGRYIAB0WIQTx
        ZF9aIhRTnWQjp+w5WdSvzDsctQUCXvCXXQAKCRA5WdSvzDsctbhPAQDqu4013Ez1
        nueEeq0Fc/5ObnIrxWQWpnPih9CaAzXcewD/XuHwJuRdAt0v1zR7chzvwIACH4UP
        cocfX1iNZOvsFwOgSwEA6jmOZmkYkd+2h8ijxfRqOeTBmym0FNzXx4/dbrPaW74B
        AIU92ZyRi7AdGJwL0ii7gArLuEELhBl4Kpy5BSgblZgPuDMEXvCXXhYJKwYBBAHa
        Rw8BAQdAF+wo1grCiFBzRGBPZEjCYa4zaYG8yvfJU3JxbioMBhKIeAQYFggAIBYh
        BFBsdjHjnzCGNaTKRS56/UDgkiN2BQJe8JdeAhsgAAoJEC56/UDgkiN2XWYA/i3y
        vpxJ7CrLdpT63w3wE0EUpnL8dQ4w1kclsvFC4ZTJAQCEYrRHvE2e8a/GKxvYTjkn
        o48h93APyUSMaalMKju9Bw==
        =XYfd
        -----END PGP PUBLIC KEY BLOCK-----
        -----BEGIN PGP PUBLIC KEY BLOCK-----

        mQENBFmUaEEBCACzXTDt6ZnyaVtueZASBzgnAmK13q9Urgch+sKYeIhdymjuMQta
        x15OklctmrZtqre5kwPUosG3/B2/ikuPYElcHgGPL4uL5Em6S5C/oozfkYzhwRrT
        SQzvYjsE4I34To4UdE9KA97wrQjGoz2Bx72WDLyWwctD3DKQtYeHXswXXtXwKfjQ
        7Fy4+Bf5IPh76dA8NJ6UtjjLIDlKqdxLW4atHe6xWFaJ+XdLUtsAroZcXBeWDCPa
        buXCDscJcLJRKZVc62gOZXXtPfoHqvUPp3nuLA4YjH9bphbrMWMf810Wxz9JTd3v
        yWgGqNY0zbBqeZoGv+TuExlRHT8ASGFS9SVDABEBAAG0NUdpdEh1YiAod2ViLWZs
        b3cgY29tbWl0IHNpZ25pbmcpIDxub3JlcGx5QGdpdGh1Yi5jb20+iQEiBBMBCAAW
        BQJZlGhBCRBK7hj4Ov3rIwIbAwIZAQAAmQEH/iATWFmi2oxlBh3wAsySNCNV4IPf
        DDMeh6j80WT7cgoX7V7xqJOxrfrqPEthQ3hgHIm7b5MPQlUr2q+UPL22t/I+ESF6
        9b0QWLFSMJbMSk+BXkvSjH9q8jAO0986/pShPV5DU2sMxnx4LfLfHNhTzjXKokws
        +8ptJ8uhMNIDXfXuzkZHIxoXk3rNcjDN5c5X+sK8UBRH092BIJWCOfaQt7v7wig5
        4Ra28pM9GbHKXVNxmdLpCFyzvyMuCmINYYADsC848QQFFwnd4EQnupo6QvhEVx1O
        j7wDwvuH5dCrLuLwtwXaQh0onG4583p0LGms2Mf5F+Ick6o/4peOlBoZz48=
        =Bvzs
        -----END PGP PUBLIC KEY BLOCK-----
        -----BEGIN PGP PRIVATE KEY BLOCK-----

        lIYEXvCXXBYJKwYBBAHaRw8BAQdAAZ2SkTVon0o5GOrFeGvyyFzCsD1D/5YaDuft
        lcCDj7j+BwMC7sy7xo4yICDs58wocxNUPChlafDEeLFpj0nniKUFpneMe7UZ3y7m
        9phoLB81h14qGVg2Dv/x3+qXQ6rkcu0HaVDnPnhzAoE4eqNKkKDUIrQeRnVua3kg
        VGVhIE9vbG9uZyA8Zm9vQGJhci5iYXo+iJAEExYIADgWIQRQbHYx458whjWkykUu
        ev1A4JIjdgUCXvCXXAIbAwULCQgHAgYVCgkICwIEFgIDAQIeAQIXgAAKCRAuev1A
        4JIjdpqyAP9WhRu08QZcada1drKzy1bQtMIHBzcXYWQsuMXXM+iSlAEAzRg+1NcQ
        Ir3g2zoeripP0Ptn5Au+S9cCySJxhw5O2w6ciwRe8JdcEgorBgEEAZdVAQUBAQdA
        2HKKLpvi6Lix2IO6ZuH8rWk4SQMA+p/qqJputEKtY08DAQgH/gcDAnQ8oXqItJKi
        7Jgcb7ToR4H6/dH3XWJWzeFcbFiflQXi18k1K5pyFWrxJdGIGP18og3kL3ZVZ5gd
        pJYCAXWQjlhBX/viHUz+d2Gd4QGajoiIeAQYFggAIBYhBFBsdjHjnzCGNaTKRS56
        /UDgkiN2BQJe8JdcAhsMAAoJEC56/UDgkiN2xDIA/j+lvqYc6CJhWm2g1spJkjtp
        DogkPK27q/qwRA09p5S1AP0fuwq6uHS73bz3G6Ej5Qx4vCQ+R1smF9tE/swPdxy2
        B5yGBF7wl10WCSsGAQQB2kcPAQEHQBv1TsKsKYBFv1ZzVVx+TfIljsydrw5pk3ja
        atzrqckh/gcDAst40uzvUMHv7IrvPpKDFwk0lIQsZuX8Vq3GkqklX0uePiR5R279
        gkcOAYXA7oK1RiYZjosnn4o4Q2ZzTKI8Vb692+cxtrfIA+9MjB8yL+eI7wQYFggA
        IBYhBFBsdjHjnzCGNaTKRS56/UDgkiN2BQJe8JddAhsCAIEJEC56/UDgkiN2diAE
        GRYIAB0WIQTxZF9aIhRTnWQjp+w5WdSvzDsctQUCXvCXXQAKCRA5WdSvzDsctbhP
        AQDqu4013Ez1nueEeq0Fc/5ObnIrxWQWpnPih9CaAzXcewD/XuHwJuRdAt0v1zR7
        chzvwIACH4UPcocfX1iNZOvsFwOgSwEA6jmOZmkYkd+2h8ijxfRqOeTBmym0FNzX
        x4/dbrPaW74BAIU92ZyRi7AdGJwL0ii7gArLuEELhBl4Kpy5BSgblZgPnIYEXvCX
        XhYJKwYBBAHaRw8BAQdAF+wo1grCiFBzRGBPZEjCYa4zaYG8yvfJU3JxbioMBhL+
        BwMCmRzdBE6TjpLsTkWv34TCttSmwmXow+JFQDhiA5tghW0gGPE64QZnUNkRvUHU
        T25bN6aKaPAWZ5r6ZAS68GdxBBN8yopnOd2mNETDZlO86Ih4BBgWCAAgFiEEUGx2
        MeOfMIY1pMpFLnr9QOCSI3YFAl7wl14CGyAACgkQLnr9QOCSI3ZdZgD+LfK+nEns
        Kst2lPrfDfATQRSmcvx1DjDWRyWy8ULhlMkBAIRitEe8TZ7xr8YrG9hOOSejjyH3
        cA/JRIxpqUwqO70H
        =B0/w
        -----END PGP PRIVATE KEY BLOCK-----

jobs:
    # Obtain task details and validate required execution conditions
    cirrus-ci_retrospective:
        # Do not execute for other github applications, only works with cirrus-ci
        if: github.event.check_suite.app.name == 'Cirrus CI'
        runs-on: ubuntu-latest
        steps:
            - name: Execute latest upstream cirrus-ci_retrospective
              # Actually use the (not-normally recommended) latest version,
              # since it likely represents the behaviors most similar to
              # what this action expects.
              uses: docker://quay.io/libpod/cirrus-ci_retrospective:latest
              env:
                GITHUB_TOKEN: ${{ github.token }}

            - name: Clone latest master branch repository code
              uses: actions/checkout@v2
              with:
                  fetch-depth: 1
                  path: ./master
                  # DO NOT build-in any unnecessary permissions
                  persist-credentials: 'false'

            - name: Load cirrus-ci_retrospective JSON and set action output variables
              id: retro
              env:
                  DEBUG: 1
              run: |
                  source ./master/$HELPER_LIB
                  load_ccir $GITHUB_WORKSPACE
                  set_ccir

            # Provide feedback in PR for normal workflow ($ACTION-TASK task has not run).
            - if: steps.retro.outputs.do_intg == 'true'
              id: create_pr_comment
              name: Create a status comment in the PR
              # Ref: https://github.com/marketplace/actions/comment-action
              uses: jungwinter/comment@v1
              with:
                  issue_number: '${{ steps.retro.outputs.prn }}'
                  type: 'create'
                  token: '${{ secrets.GITHUB_TOKEN }}'
                  # N/B: At the time of this comment, it is not possible to provide
                  # direct links to specific job-steps (here) nor links to artifact
                  # files.  There are open RFE's for this capability to be added.
                  body: >-
                      [Cirrus-CI Retrospective Github
                      Action](https://github.com/${{github.repository}}/actions/runs/${{github.run_id}})
                      has started.  Running against
                      [${{ steps.retro.outputs.sha }}](https://github.com/${{github.repository}}/pull/${{steps.retro.outputs.prn}}/commits/${{steps.retro.outputs.sha}})
                      in this pull request.

            # Since we're executing from the master branch, github will silently
            # block allow direct checkout of PR code.
            - if: steps.retro.outputs.do_intg == 'true'
              name: Clone all repository code
              uses: actions/checkout@v2
              with:
                  # Get ALL available history to avoid problems during any run of
                  # 'git describe' from any script in the repo.
                  fetch-depth: 0
                  path: ./pull_request
                  # Will be used to execute code from the PR
                  # DO NOT build-in any unnecessary permissions
                  persist-credentials: 'false'

            # This workflow always runs from the master branch, this is not helpful
            # for PR authors wanting to change the container or script's behavior.
            # Clone down a copy of the code from the PR, so it may be utilized for
            # a test-build and secondary execution of cirrus-ci_retrospective
            - if: steps.retro.outputs.do_intg == 'true'
              name: Fetch PR code used by Cirrus-CI during completed build
              run: |
                  mkdir -p test_artifacts
                  cp "$GITHUB_EVENT_PATH" test_artifacts/
                  mkdir -p pull_request
                  cd pull_request
                  git fetch origin "${{ steps.retro.outputs.sha }}"
                  git checkout -b 'pr${{ steps.retro.outputs.prn }}' FETCH_HEAD
                  git log -1 | tee ../test_artifacts/commit.txt

            - if: steps.retro.outputs.do_intg == 'true'
              name: Execute helper library unit-tests using code from PR
              run: |
                  cd pull_request
                  ./$HELPER_LIB_TEST | tee ../test_artifacts/unit_test_output.txt

            # Update the status comment posted to the PR
            - if: steps.retro.outputs.do_intg == 'true'
              id: edit_pr_comment_build
              name: Update status comment on PR
              uses: jungwinter/comment@v1
              with:
                  type: 'edit'
                  comment_id: '${{ steps.create_pr_comment.outputs.id }}'
                  token: '${{ secrets.GITHUB_TOKEN }}'
                  body: >-
                      Unit-testing passed (`${{ env.HELPER_LIB_TEST }}`)passed.
                      [Cirrus-CI Retrospective Github
                      Action](https://github.com/${{github.repository}}/actions/runs/${{github.run_id}})
                      is building test container images.

            # The Dockerfile and container environment may have changed in addition
            # to scripts.  Re-build a testing container image for use in exercising
            # the code from the PR.
            - if: steps.retro.outputs.do_intg == 'true'
              name: Build container images in parallel from PR code
              strategy:
                  matrix:
                      name:
                          - cirrus-ci_retrospective
                          - ephemeral_gpg
              run: |
                  cd pull_request/${{ matrix.name }}
                  docker build -t ${{ matrix.name }}:test \
                        --build-arg INSTALL_AUTOMATION_VERSION=0.0.0 \
                        ./ &> ../test_artifacts/${{ matrix.name }}-build_output.txt &

            # The container build can take a few minutes, update status comment when it finishes.
            - if: steps.retro.outputs.do_intg == 'true'
              id: edit_pr_comment_exec
              name: Update status comment on PR again
              uses: jungwinter/comment@v1
              with:
                  type: 'edit'
                  comment_id: '${{ steps.edit_pr_comment_build.outputs.id }}'
                  token: '${{ secrets.GITHUB_TOKEN }}'
                  body: >-
                      Test container images built.  [Cirrus-CI Retrospective Github
                      Action](https://github.com/${{github.repository}}/actions/runs/${{github.run_id}})
                      is executing test containers.

            # Smoke-test the built containers for basic functinality
            - if: steps.retro.outputs.do_intg == 'true'
              name: Execute PR's cirrus-ci_retrospective container image
              strategy:
                  matrix:
                      name:
                          - cirrus-ci_retrospective
                          - ephemeral_gpg
              env:
                  _pr: './test_artifacts/test_repo'
                  _pp: './test_artifacts/test_repo/private.pas'
                  _pk: './test_artifacts/test_repo/private.key'
              run: |
                  case "${{ matrix.name }}" in
                      cirrus-ci_retrospective)
                          github_event_dirpath=$(dirname "${{ github.event_path }}")
                          /usr/bin/docker run --rm \
                              -e GITHUB_TOKEN=${{ github.token }} \
                              -e GITHUB_EVENT_PATH=/github/workflow/event.json \
                              -e GITHUB_ACTIONS=true \
                              -e GITHUB_WORKSPACE=/github/workspace \
                              -v "$GITHUB_WORKSPACE/pull_request":"/github/workspace" \
                              -v $github_event_dirpath:/github/workflow \
                              --entrypoint=/bin/bash \
                              ${{ matrix.name }}:test \
                              -c "source /etc/profile && exec /usr/share/automation/bin/debug.sh" \
                              &> ./test_artifacts/debug_output.txt
                          mv ./cirrus-ci_retrospective.json ./test_artifacts/ || true
                          ;;
                      ephemeral_gpg)
                          git init "$_pr"
                          echo "$TEST_PASSPHRASE" > "$_pp"
                          echo "$TEST_PRIVATE_KEY" > "$_pk"

                          ephemeral_gpg="/usr/bin/docker run --rm \
                                -e PRIVATE_PASSPHRASE_FILEPATH=/tmp/private.pas \
                                -e PRIVATE_KEY_FILEPATH=/tmp/private.key \
                                -e GNUPGHOME=/tmp/ephemeral \
                                -e TRUNCATE_PASSPHRASE_ON_READ=0 \
                                --tmpfs /tmp:rw,size=64m \
                                -v $_pp:/tmp/private.pas:rw \
                                -v $_pk:/tmp/private.key:rw \
                                -v $_pr:/tmp/repo:rw \
                                --workdir /tmp/repo \
                                ${{ matrix.name }}:test"

                            $ephemeral_gpg add private.pas private.key
                            $ephemeral_gpg commit -sm 'test commit message'
                            $ephemeral_gpg log -1 --show-signature HEAD &> ./test_artifacts/test_repo.commit
                            $ephemeral_gpg tag -as v0.0.0 -m 'test tag annotation' HEAD
                            $ephemeral_gpg tag -v HEAD &> ./test_artifacts/test_repo.tag
                          ;;
                      *)
                          echo "Unknown/unsupported matrix key '${{ matrix.name }}'."
                          exit 1
                  esac

            - if: steps.retro.outputs.do_intg == 'true'
              name: Validate ephemeral_gpg test container output
              run: |
                  cd pull_request/test_artifacts/test_repo
                  for ext in pas key; do
                      test "$(stat --format %s private.$ext)" -eq 0
                  cd ../
                  tr '\r\n' ' ' test_repo.commit | tee /dev/stderr | \
                      egrep -q "gpg.+Signature.+Good signature.+ultimate.+Author.+Fine"
                  tr '\r\n' ' ' test_repo.tag | tee /dev/stderr | \
                      egrep -q ".+Good signature.+tagger Fine Oolong"


            - if: steps.retro.outputs.do_intg == 'true'
              id: pr_retro
              name: Load cirrus-ci_retrospective test container output into github action parameters
              env:
                  DEBUG: 1
              run: |
                  cd pull_request
                  source ./$HELPER_LIB
                  load_ccir $GITHUB_WORKSPACE/test_artifacts
                  set_ccir

            - if: steps.retro.outputs.do_intg == 'true'
              name: Validate cirrus-ci_retrospective github action parameters match expected values
              run: |
                  samesame() { if [[ -z "$1" ]] || [[ "$2" != "$3" ]]; then echo "::error::Expecting $1 '$2' to equal '$3'"; exit 1; fi }
                  samesame "steps.pr_retro.outputs.prn" "${{ steps.pr_retro.outputs.prn }}" "${{ steps.retro.outputs.prn }}"
                  samesame "steps.pr_retro.outputs.was_pr" "${{ steps.pr_retro.outputs.was_pr }}" "${{ steps.retro.outputs.was_pr }}"
                  samesame "steps.pr_retro.outputs.tid" "${{ steps.pr_retro.outputs.tid }}" "${{ steps.retro.outputs.tid }}"
                  samesame "steps.pr_retro.outputs.sha" "${{ steps.pr_retro.outputs.sha }}" "${{ steps.retro.outputs.sha }}"
                  samesame "steps.pr_retro.outputs.tst" "${{ steps.pr_retro.outputs.tst }}" "${{ steps.retro.outputs.tst }}"
                  samesame "steps.pr_retro.outputs.do_intg" "${{ steps.pr_retro.outputs.do_intg }}" "${{ steps.retro.outputs.do_intg }}"

            # Allow PR to be merged by triggering required action-status marker task in Cirrus CI
            - if: steps.retro.outputs.do_intg == 'true'
              name: Trigger Cirrus-CI ${{ env.ACTION_TASK }} task on PR
              env:
                  # ID invented here to verify the operation performed.
                  UUID: ${{github.run_id}}.${{steps.retro.outputs.prn}}.${{steps.retro.outputs.sha}}
              run: |
                  set +x
                  trap "history -c" EXIT
                  curl --request POST \
                    --url https://api.cirrus-ci.com/graphql \
                    --header "Authorization: Bearer ${{ secrets.CIRRUS_API_TOKEN }}" \
                    --header 'content-type: application/json' \
                    --data '{"query":"mutation {\n  trigger(input: {taskId: \"${{steps.retro.outputs.tid}}\", clientMutationId: \"${{env.UUID}}\"}) {\n    clientMutationId\n    task {\n      name\n    }\n  }\n}"}' \
                    > ./test_artifacts/action_task_trigger.json

                  actual=$(jq --raw-output '.data.trigger.clientMutationId' ./test_artifacts/action_task_trigger.json)
                  echo "Verifying '$UUID' matches returned tracking value '$actual'"
                  test "$actual" == "$UUID"

            - if: steps.retro.outputs.do_intg == 'true'
              name: Update comment on workflow success
              uses: jungwinter/comment@v1
              with:
                  type: 'edit'
                  comment_id: '${{ steps.edit_pr_comment_exec.outputs.id }}'
                  token: '${{ secrets.GITHUB_TOKEN }}'
                  body: >-
                      Successfully triggered [${{ env.ACTION_TASK }}
                      task](https://cirrus-ci.com/task/${{ steps.retro.outputs.tid }}?command=main#L0)
                      to indicate
                      successful run of [cirrus-ci_retrospective integration and unit
                      testing](https://github.com/${{github.repository}}/actions/runs/${{github.run_id}})
                      from this PR's
                      [${{ steps.retro.outputs.sha }}](https://github.com/${{github.repository}}/pull/${{steps.retro.outputs.prn}}/commits/${{steps.retro.outputs.sha}}).

            - if: failure() && steps.retro.outputs.do_intg == 'true'
              name: Update comment on workflow failure
              uses: jungwinter/comment@v1
              with:
                  type: 'edit'
                  comment_id: '${{ steps.create_pr_comment.outputs.id }}'
                  token: '${{ secrets.GITHUB_TOKEN }}'
                  body: >-
                      Failure running [Cirrus-CI Retrospective Github
                      Action](https://github.com/${{github.repository}}/actions/runs/${{github.run_id}})
                      failed against this PR's
                      [${{ steps.retro.outputs.sha }}](https://github.com/${{github.repository}}/pull/${{steps.retro.outputs.prn}}/commits/${{steps.retro.outputs.sha}})

            # This can happen because of --force push, manual cancel button press, or some other cause.
            - if: cancelled() && steps.retro.outputs.do_intg == 'true'
              name: Update comment on workflow cancellation
              uses: jungwinter/comment@v1
              with:
                  type: 'edit'
                  comment_id: '${{ steps.create_pr_comment.outputs.id }}'
                  token: '${{ secrets.GITHUB_TOKEN }}'
                  body: '[Cancelled](https://github.com/${{github.repository}}/pull/${{steps.retro.outputs.prn}}/commits/${{steps.retro.outputs.sha}})'

            # Abnormal workflow ($ACTION-TASK task already ran / not paused on a PR).
            - if: steps.retro.outputs.is_pr == 'true' && steps.retro.outputs.do_intg != 'true'
              id: create_error_pr_comment
              name: Create an error status comment in the PR
              # Ref: https://github.com/marketplace/actions/comment-action
              uses: jungwinter/comment@v1
              with:
                  issue_number: '${{ steps.retro.outputs.prn }}'
                  type: 'create'
                  token: '${{ secrets.GITHUB_TOKEN }}'
                  body: >-
                      ***ERROR***: [cirrus-ci_retrospective
                      action](https://github.com/${{github.repository}}/actions/runs/${{github.run_id}})
                      found `${{ env.ACTION_TASK }}` task with unexpected `${{ steps.retro.outputs.tst }}`
                      status. This task should never be triggered manually (or multiple times) under normal
                      circumstances.

            # Negative case followup, fail the build with an error status
            - if: steps.retro.outputs.is_pr == 'true' && steps.retro.outputs.do_intg != 'true'
              run: >-
                  printf "::error::Found ${ACTION_TASK} with unexpected ${{ steps.retro.outputs.tst }} status"
                  exit 1

            # Provide an archive of files for debugging/analysis.
            - if: always() && steps.retro.outputs.do_intg == 'true'
              name: Archive event, build, and debugging output
              uses: actions/upload-artifact@v1.0.0
              with:
                  name: pr_${{ steps.retro.outputs.prn }}_debug.zip
                  path: ./test_artifacts

    debug:
        if: github.event.check_suite.app.name == 'Cirrus CI'
        runs-on: ubuntu-latest
        steps:
            - name: Collect the originating event and result JSON
              run: cp "${{ github.event_path }}" ./

            - name: Log colorized and formatted event JSON
              run: jq --indent 4 --color-output . ./event.json

            # Do this in parallel for simplicity since it's just for debugging
            # purposes.  Assume it will execute the same/similar to the regular job
            # above.
            - if: always()
              name: Execute latest upstream cirrus-ci_retrospective
              id: cirrus-ci_retrospective
              uses: docker://quay.io/libpod/cirrus-ci_retrospective:latest
              env:
                GITHUB_TOKEN: ${{ github.token }}

            - if: always()
              name: Log colorized and formatted cirrus-ci_retrospective JSON
              run: jq --indent 4 --color-output . ./cirrus-ci_retrospective.json
