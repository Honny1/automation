#!/usr/bin/perl
#
# cirrus-task-map - draw dependencies between cirrus tasks
#
package ESM::CirrusMap;

use v5.16;
use utf8;
use open qw( :encoding(UTF-8) :std );

use strict;
use warnings;

(our $ME = $0) =~ s|.*/||;

our $VERSION = "0.9";

# For debugging, show data structures using DumpTree($var)
#use Data::TreeDumper; $Data::TreeDumper::Displayaddress = 0;

###############################################################################
# BEGIN user-customizable section

# Default input file
our $Default_Yml = '.cirrus.yml';

# Palette of somewhat distinct colors. Each box (task), and arrows
# proceeding out of it, will be drawn in a unique color.
# Try to leave one or two greens at the end: these will be used
# for terminal nodes (e.g. "success")
our @Colors = qw(
                    orange red darkgoldenrod firebrick1 orangered4
                    darkturquoise deeppink deepskyblue3 coral dodgerblue
                    bisque2 indigo darkorchid1 palevioletred2 slateblue4
                    cornsilk4 deepskyblue4 navajowhite2
                    slateblue1 yellow4 brown chartreuse seagreen3 darkgreen
            );

# Color overrides: use sys/int/etc colors from github-ci-highlight Greasemonkey
#
#   https://github.com/edsantiago/greasemonkey/tree/master/github-ci-highlight
#
# No sane way to fetch colors automatically, so, just duplicate.
our %Color_Override = (
    #                       FG  BG
    apiv2               => 'fff:c0c',
    bud                 => '000:fc0',
    compose             => '660:fff',
    integration         => '000:960',
    system              => '000:cf9',
    unit                => '000:f99',
    upgrade             => 'f0c:fff',
    '(?<!image.)build'  => '00f:fff',
    'image.build'       => 'f85:fff',
    validate            => '0c0:fff',
    machine             => '330:0ff',
    success             => '000:0f0',
);

# END   user-customizable section
###############################################################################

use POSIX qw(strftime);

###############################################################################
# BEGIN boilerplate args checking, usage messages

sub usage {
    print  <<"END_USAGE";
Usage: $ME [OPTIONS] [CIRRUS_YML_FILE | OUTFILE ... ]

$ME uses graphviz to generate a diagram of task dependencies
as specified in CIRRUS_YML_FILE (default: $Default_Yml). It
first writes an output .gv file (default: CIRRUS_YML_FILE.gv)
then uses graphviz's `dot` to generate one or more image files.

OUTFILE can be any path with extension .gv, .png, .pdf, .ps, or .svg

If no OUTFILE is given, $ME writes <CIRRUS_YML_FILE>.gv and .png

OPTIONS:
  --no-reduce    do not reduce transitive edges. Default is to reduce,
                 e.g. if 'success' depends on 'a' and 'b', and 'b' depends
                 on 'a', we do not want an arrow from 'a' to 'success'.

  --help         display this message
  --version      display program name and version
END_USAGE

    exit;
}

# Command-line options.  Note that this operates directly on @ARGV !
our $reduce  = 1;               # run 'tred' to reduce transitive edges
our $debug   = 0;
our $verbose = 0;
our $NOT     = '';              # print "blahing the blah$NOT\n" if $debug
sub handle_opts {
    use Getopt::Long;
    GetOptions(
        'reduce!'    => \$reduce,

        'debug!'     => \$debug,
        'dry-run|n!' => sub { $NOT = ' [NOT]' },
        'verbose|v'  => \$verbose,

        help         => \&usage,
        version      => sub { print "$ME v$VERSION\n"; exit 0; },
    ) or die "Try `$ME --help' for help\n";
}

# END   boilerplate args checking, usage messages
###############################################################################

############################## CODE BEGINS HERE ###############################

# The term is "modulino".
__PACKAGE__->main()                                     unless caller();

# Main code.
sub main {
    # Note that we operate directly on @ARGV, not on function parameters.
    # This is deliberate: it's because Getopt::Long only operates on @ARGV
    # and there's no clean way to make it use @_.
    handle_opts();                      # will set package globals

    # Fetch command-line arguments. None are required, but if present
    # we override the input YML file and/or output GV/PNG files.
    my $yml_in = $Default_Yml;
    my %outfile;
    for my $arg (@ARGV) {
        if ($arg =~ /\.ya?ml$/) {
            -e $arg
                or die "$ME: File does not exist: $arg\n";
            $yml_in = $arg;
        }
        elsif ($arg =~ /^(.*)\.(gv|png|svg|ps|pdf)$/) {
            $outfile{$2} = $arg;

            # We always write a .gv file. Use the first output file as basename
            $outfile{gv} //= "$1.gv";
        }
        else {
            die "$ME: Cannot interpret '$arg' as input (yml, yaml) or output (gv, png, pdf, ps, svg)\n";
        }
    }

    # If given any output file at all, we already have this set.
    my $out_gv = delete($outfile{gv}) || "$yml_in.gv";

    # Everything left in %outfile is an image. If given none, default to svg
    if (! keys %outfile) {
        ($outfile{png} = $out_gv) =~ s/\.gv$/.png/;
    }

    # Process the input file, create output files
    my $tasklist = TaskList->new($yml_in);
    write_gv($out_gv, $tasklist);
    write_img($out_gv, $_, $outfile{$_}) for sort keys %outfile;
}

###############
#  write_img  #  Given a GV file, use graphviz to generate an image file
###############
sub write_img {
    my $gv_in   = shift;
    my $format  = shift;
    my $img_out = shift;

    my $gv_fh;
    my $gv_desc;
    if ($reduce) {
        $gv_desc = "reading from 'tred $gv_in'";
        open $gv_fh, '-|', 'tred', $gv_in
            or die "$ME: Cannot fork 'tred': $!\n";
    }
    else {
        $gv_desc = "reading $gv_in";
        open $gv_fh, '<', $gv_in
            or die "$ME: Cannot read $gv_in: $!\n";
    }

    my $img_out_tmp = "$img_out.tmp.$$.$format";
    unlink $img_out_tmp;

    open my $dot_fh, '|-', 'dot', "-T$format", "-o$img_out_tmp"
        or die "$ME: Cannot fork 'dot': $!\n";
    while (my $line = <$gv_fh>) {
        print { $dot_fh } $line;
    }
    close $gv_fh
        or die "$ME: Error $gv_desc: $!\n";
    close $dot_fh
        or die "$ME: Error running 'dot'\n";
    rename $img_out_tmp => $img_out
        or die "$ME: Could not rename $img_out_tmp: $!\n";

    # Annotate: add signature line at lower left
    # FIXME: include git repo info?
    if (grep { -x "$_/convert" } split(":", $ENV{PATH})) {
        unlink $img_out_tmp;
        my $signature = strftime("Generated %Y-%m-%dT%H:%M:%S%z by $ME v$VERSION", localtime);
        my @cmd = (
            "convert",
            '-family'    => 'Courier',
            '-pointsize' => '12',
#            '-style'     => 'Normal',  # Argh! This gives us Bold!?
            '-weight'    => 'Normal',
            '-fill'      => '#000',
            '-gravity'   => 'SouthWest',
            "-annotate", "+5+5", $signature,
            "$img_out" => "$img_out_tmp"
        );
        if (system(@cmd) == 0) {
            rename $img_out_tmp => $img_out;
        }
        else {
            warn "$ME: Could not annotate $img_out\n";
        }
    }

    chmod 0444 => $img_out;

    # Special case for SVG: we can make a dynamic map with actions on hover
    if ($format eq 'svg') {
        make_dynamic_svg($img_out);
    }
}


##############
#  write_gv  #  Write a GV (DOT) file
##############
sub write_gv {
    my $outfile  = shift;
    my $tasklist = shift;

    my $tmpfile = "$outfile.tmp.$$";
    unlink $tmpfile;

    # Write it out in DOT format
    open my $out, ">", $tmpfile
        or die "$ME: Cannot create $tmpfile: $!\n";
    print { $out } $tasklist->graphviz(@Colors);
    close $out
        or die "$ME: Error writing $tmpfile: $!\n";
    chmod 0444 => $tmpfile;
    rename $tmpfile => $outfile
        or die "$ME: Could not rename $tmpfile: $!\n";
}


######################
#  make_dynamic_svg  #  Add :hover elements
######################
sub make_dynamic_svg {
    my $svg_path = shift;

    my $svg_tmp = "$svg_path.tmp.$$";
    open my $fh_in, '<', $svg_path
        or die "$ME: cannot read $svg_path: $!\n";

    my %skip;
    my %only_if;
    my %node_is_onlyif;

    my $current_node  = '';
    my $current_title = '';

    # Pass 1: read the original SVG, getting a sense for all nodes
    while (my $line = <$fh_in>) {
        # Group, generated by GraphViz itself: node1, node2, node3, ...
        if ($line =~ m!<g id="(.*?)"!) {
            $current_node = $1;
        }
        # Cirrus task name, e.g. validate, system_test
        elsif ($line =~ m!<title>(.*)</title>!) {
            # Convert 'docker&#45;py_test' to just 'dockerpy_test'
            ($current_title = $1) =~ s/&.*?;//;
        }
        # This will be in a <text>...</text> element
        elsif ($line =~ /\[SKIP:\s+(.*?)\]/) {
            $skip{lc $1}{$current_title} = 1;
        }
        # This too
        elsif ($line =~ /\[only\s+if\s+(.*?)\]/) {
            $node_is_onlyif{$current_node} = 1   unless lc($1) eq 'pr';
            $only_if{lc $1}{$current_title} = 1;
        }
    }

    # Pass 2: reread, and now write (filtering) to custom-tweaked svg
    seek $fh_in, 0, 0;

    open my $fh_out, '>', $svg_tmp
        or die "$ME: Cannot create $svg_tmp: $!\n";
    while (my $line = <$fh_in>) {
        my $skip;
        my $onlyif;

        # e.g. the 'release' step in podman only runs on tag
        if ($line =~ m!<g id="(.*?)"!) {
            if ($node_is_onlyif{$1}) {
                $line =~ s!>! opacity="0.2">!;
            }
        }
        # Cirrus task name, e.g. validate, system_test
        elsif ($line =~ m!<title>(.*)</title>!) {
            ($current_title = $1) =~ s/&.*?;//;
        }
        elsif ($line =~ /\[SKIP:\s+(.*?)\]/) {
            $skip = lc $1;
            $line =~ s!<text !<text id="skip_${skip}_${current_title}" !;
        }
        elsif ($line =~ /\[only\s+if\s+(.*?)\]/) {
            $onlyif = lc $1;
            # FIXME: how to set default opacity for this block?
            $line =~ s!<text !<text id="onlyif_${onlyif}_${current_title}" !;
        }

        print { $fh_out } $line;

        # This is where we add value
        if ($skip) {
            for my $t (sort keys %{$skip{$skip}}) {
                print { $fh_out } qq{<set attributeName="opacity" to="0.1" begin="skip_${skip}_${t}.mouseover" end="skip_${skip}_${t}.mouseout" />\n};
            }
            if ($only_if{$skip}) {
                for my $t (sort keys %{$only_if{$skip}}) {
                    print { $fh_out } qq{<set attributeName="opacity" to="0.1" begin="onlyif_${skip}_${t}.mouseover" end="onlyif_${skip}_${t}.mouseout" />\n};
                }
            }
        }
        if ($onlyif && $onlyif ne 'pr') {
            for my $t (sort keys %{$only_if{$onlyif}}) {
                print { $fh_out } qq{<set attributeName="opacity" to="1.0" begin="onlyif_${onlyif}_${t}.mouseover" end="onlyif_${onlyif}_${t}.mouseout" />\n};
            }
            if ($skip{$onlyif}) {
                for my $t (sort keys %{$skip{$onlyif}}) {
                    print { $fh_out } qq{<set attributeName="opacity" to="1.0" begin="skip_${onlyif}_${t}.mouseover" end="skip_${onlyif}_${t}.mouseout" />\n};
                }
            }
        }
    }
    close $fh_out
        or die "$ME: Error writing $fh_out: $!\n";
    close $fh_in;

    # Done. Replace original SVG.
    chmod 0444 => $svg_tmp
        or die "$ME: Cannot chmod 0444 $svg_tmp: $!\n";
    rename $svg_tmp => $svg_path
        or die "$ME: Could not rename $svg_tmp -> $svg_path: $!\n";
}


###############################################################################

package Task;

use Carp;

sub new {
    my $proto = shift;
    my $class = ref($proto) || $proto;

    my $name = shift			# in: mandatory arg
	or croak "Usage: ".__PACKAGE__."->new( NAME, HREF )";
    my $cirrus_yml = shift			# in: mandatory arg
	or croak "Usage: ".__PACKAGE__."->new( NAME, HREF )";
#    $cirrus_yml->{$name}{_top} = $cirrus_yml;

    my $self = {
        name => $name,
        yml  => $cirrus_yml,
    };

    return bless $self, $class;
}


sub name {
    my $self = shift;

    (my $name = $self->{name}) =~ s/_task$//;

    return $name;
}

sub displayname {
    my $self = shift;

    return $self->{yml}{name} || $self->name;
}


sub depends_on {
    my $self = shift;

    if (my $d = $self->{yml}{depends_on}) {
        return map { $self->{_tasklist}->find($_) } @$d;
    }
    return;
}

###########
#  _size  #  Heuristic for sorting: how many in/out edges, plus matrix jobs
###########
sub _size {
    my $node  = shift;
    my $count = 0;

    if (my $on = $node->{yml}{depends_on}) {
        $count += @$on;
    }
    if (my $by = $node->{_depended_on_by}) {
        $count += @$by;
    }
    if (my $m = $node->{yml}{matrix}) {
        $count += @$m;
    }

    return $count;
}

##############
#  _by_size  #  sort helper, for putting big nodes at bottom
##############
sub _by_size {
    _size($a) <=> _size($b) ||
        $a->{name} cmp $b->{name};
}

sub depended_on_by {
    my $self = shift;

    if (my $d = $self->{_depended_on_by}) {
        my @d = sort _by_size map { $self->{_tasklist}->find($_) } @$d;
        return @d;
    }
    return;
}

# FIXME: matrix and env matrix
sub subtasks {
    my $self = shift;

    my @subtasks;
    if (my $m = $self->{yml}{matrix}) {
        for my $item (@$m) {
            my $name = $self->_expand_name( $item );
            push @subtasks, "- " . $name . '\l';
        }
    }
    elsif (my $name = $self->{yml}{name}) {
        if ($name =~ /\$/) {
            # A name with dollars, like "$TEST_FLAVOR $PODBIN $DISTRO_NV etc",
            # is worth a box entry showing that expansion. This will be only
            # one line (as opposed to one or more for matrix stanzas) but
            # the expansion is still useful so reader can know what arch
            # and OS this is running on.
            push @subtasks, '= ' . $self->_expand_name( $name ) . '\l';
        }
    }

    return @subtasks;
}


sub env_matrix {
    my $self = shift;

    my @subenv;
    if (my $e = $self->{yml}{env}) {
        if (my $m = $e->{matrix}) {
            # FIXME: buildah has a one-item matrix??
            if ((ref($m)||'') eq 'ARRAY') {
                my %e_matrix;
                for my $tuple (@$m) {
                    for my $k (keys %$tuple) {
                        push @{$e_matrix{$k}}, $tuple->{$k};
                    }
                }

                for my $k (sort keys %e_matrix) {
                    my $foo = "* $k=" . join("/", @{$e_matrix{$k}}) . '\l';
                    push @subenv, $foo;
                }
            }
        }
    }

    @subenv;
}


##################
#  _expand_name  #  Iteratively expand $FOO or ${FOO} or a matrix name
##################
sub _expand_name {
    my $self = shift;
    my $item = shift;
    my $name;

    # Environment: start with top-level env defined for entire yml file
    my %env;
    if (my $top_env = $self->{_top}{env}) {
        %env = (%env, %$top_env);
    }

    # Override with env in this task
    if (my $env = $self->{yml}{env}) {
        %env = (%env, %$env);
    }

    # ...then finally, if this is a matrix item, with its env
    if ((ref($item)||'') eq 'HASH') {
        if (my $m_env = $item->{env}) {
            %env = (%env, %$m_env);
        }
        $name = $item->{name};
    }

    $name //= $self->{yml}{name} || $self->name || '?';

    while ($name =~ /\$/) {
        my $name_old = $name;

        $name =~ s/\$\{(.*?)\}/$env{$1} || "\$$1"/ge;
        $name =~ s/\$([A-Z_]+)/$env{$1} || "\$$1"/ge;

        # Don't infinite-loop
        last if $name_old eq $name;
        print "$name_old -> $name\n"            if $debug;
    }

    return $name;
}

###############################################################################

package TaskList;

use Carp;
use YAML::XS qw(Load LoadFile);

sub new {
    my $proto = shift;
    my $class = ref($proto) || $proto;

    my $yml_in = shift			# in: mandatory arg
	or croak "Usage: ".__PACKAGE__."->new( PATH-TO-CIRRUS-YML )";

    # Load Cirrus config
    my $cirrus_yml;
    if ($yml_in =~ /^---/) {
        ($cirrus_yml, undef, undef) = mergekeys(Load($yml_in));
    }
    else {
        ($cirrus_yml, undef, undef) = mergekeys(LoadFile($yml_in));
    }

    my $self = bless {
        yml_file => $yml_in,
        yml      => $cirrus_yml,
        tasks    => [],
    }, $class;

    my %depends_on;

    # EEEK! Deal with just 'task', FIXME!
    for my $fullname (grep { /task$/ } keys %$cirrus_yml) {
        (my $task_name = $fullname) =~ s/_task$//;
        if ($task_name eq 'task') {
            if (my $alias = $cirrus_yml->{$fullname}{alias}) {
                $task_name = $alias;
            }
        }

        my $task = Task->new($task_name, $cirrus_yml->{$fullname});
        $task->{_top} = $cirrus_yml;
        $task->{_tasklist} = $self;

        if (my $dep = $cirrus_yml->{$fullname}{depends_on}) {
            # The "depends_on" list does not include "_task"
            $depends_on{$_}{$task_name} = 1 for @$dep;
        }
        else {
            $task->{_is_start_node} = 1;
        }

        push @{ $self->{tasks} }, $task;
    }

    # Pass 2
    for my $task (@{ $self->{tasks} }) {
        my %depended_on_by;             # Use a hash so we can dedup
        if (my $d = $depends_on{$task->name}) {
            # Literal depends
            %depended_on_by = (%depended_on_by, %$d);
        }
        if (my $alias = $task->{yml}{alias}) {
            if (my $d_a = $depends_on{$alias}) {
                # Depends via alias
                %depended_on_by = (%depended_on_by, %$d_a);
            }
        }

        $task->{_depended_on_by} = [ sort keys %depended_on_by ];
#        my $n = $task->name;
#        use Data::Dumper; print STDERR "depended_on_by($n) = ", Dumper($task->{_depended_on_by});
    }


    # Determine git info, for use in plot title
    unless ($yml_in =~ /^---/) {
        my $git = 'git';
        if ($yml_in =~ m!^(.*/)!) {
            $git .= " -C $1";
        }
        chomp(my $repo   = qx{$git remote -v});
        chomp(my $branch = qx{$git branch --show-current});
        chomp(my $rev    = qx{$git rev-parse --short HEAD});

        $self->{_git}{repo}   = $1          if ($repo||'') =~ m!:(\S+?/\S+)\.!;
        $self->{_git}{branch} = $branch     if $branch;
        $self->{_git}{rev}    = $rev        if $rev;

        # Flag if cirrus yml is modified
        if (my $modified = qx{$git ls-files -m $yml_in}) {
            $self->{_git}{rev} .= '(modified)';
        }
    }

    return $self;
}

sub tasks {
    my $self = shift;

    return @{ $self->{tasks} };
}


##########
#  find  #  Given a node name (string), return the task object
##########
sub find {
    my $self = shift;
    my $want = shift;

    my @match = grep { $_->{name} eq $want } $self->tasks;
    if (@match == 0) {
        @match = grep { ($_->{yml}{alias}||'') eq $want } $self->tasks;
    }
    croak "No task matches '$want'"             if @match == 0;
    croak "Too many matches for task '$want'!"  if @match > 1;

    return $match[0];
}


#################
#  start_nodes  #  List of nodes with no dependencies: these are the LHS
#################
sub start_nodes {
    my $self = shift;

    return sort { $a->name cmp $b->name } grep { ! $_->depends_on } $self->tasks;
}


##############
#  graphviz  #  Returns a graphviz (dot) file, as a string
##############
sub graphviz {
    my $self = shift;

    $self->{_gv} = { done => {}, colors => \@_ };

    $self->{_gv}{dot} = <<'EOF';
strict digraph X {
  graph [fontname="Courier" rankdir=LR ratio=0.7]
EOF

    if (my $g = $self->{_git}) {
        my $label = sprintf("%s: %s @ %s",
                            $g->{repo}   || '(unknown repo)',
                            $g->{branch} || '(unknown branch)',
                            $g->{rev}    || '(unknown rev)');
        $self->{_gv}{dot} .= <<"EOF";
  label="$label" labelloc=top labeljust=left
EOF
    }

    for my $start ($self->start_nodes) {
        $self->_draw_boxes($start);
    }

    return $self->{_gv}{dot} . "}\n";
}


#################
#  _draw_boxes  #  Draw a gv box for a node, then recurse into its children
#################
sub _draw_boxes {
    my $self = shift;
    my $task = shift;

    my $node = $task->{name};
    return if $self->{_gv}{done}{$node}++;

    my $color;
    my $fill = '';
    for my $term (sort keys %Color_Override) {
        if ($node =~ /(^|_)${term}(_|$)/) {
            my ($fg, $bg) = split ':', $Color_Override{$term};
            $fg =~ s/(.)/${1}0/g;
            $bg =~ s/(.)/${1}0/g;
            $color = qq{"#$fg\"};
            $fill  = qq{ fillcolor="#$bg" style=filled};
            last;
        }
    }

    # Terminal nodes: pop from the end of the color list (expect greens)
    if (! $color) {
        if (! $task->depended_on_by) {
            $color = pop @{$self->{_gv}{colors}};
        }
        else {
            $color = shift @{$self->{_gv}{colors}};
        }
    }
    if (! $color) {
        warn "$ME: Ran out of colors\n";
        $color = 'black';
    }

    my $shape = 'ellipse';
    my $label = '';

    if (my @subtasks = $task->subtasks) {
        $shape = 'record';
        $label .= join('', @subtasks);
    }
    if (my @env_matrix = $task->env_matrix) {
        $shape = 'record';
        $label .= '|' if $label;
        $label .= join('', @env_matrix);
    }

    # Special cases (all hardcoded) for conditional tasks.
    if (my $only_if = $task->{yml}{only_if}) {
        $shape = 'record';
        $label .= '|' if $label;
        if ($only_if =~ /CI:DOCS.*CI:BUILD/) {
            $label .= "[SKIP: CI:BUILD]\\l[SKIP: CI:DOCS]\\l";
        }
        elsif ($only_if =~ /CI:DOCS/) {
            $label .= "[SKIP: CI:DOCS]\\l";
        }
        # 2020-10 used in automation_images repo
        elsif ($only_if eq q{$CIRRUS_PR != ''}) {
            $label .= "[only if PR]";
        }
        # 2020-10 used in automation_images repo
        elsif ($only_if eq q{$CIRRUS_PR == '' && $CIRRUS_CRON != ''}) {
            $label .= "[only if cron]";
        }
        # 2022-09
        elsif ($only_if eq q{$CIRRUS_PR != '' && $CIRRUS_CHANGE_TITLE =~ '.*CI:BUILD.*'}) {
            $label .= "[only if PR + CI:BUILD]";
        }
        elsif ($only_if eq q{${CIRRUS_CRON} == 'main'}) {
            $label .= "[only if cron on main]";
        }
        # 2022-09
        elsif ($only_if eq q{$CIRRUS_CRON == 'multiarch'}) {
            $label .= "[only if cron multiarch]";
        }
        elsif ($only_if eq q{$CIRRUS_CRON != 'multiarch'}) {
            $label .= "[SKIP: cron multiarch]";
        }
        # used in podman
        elsif ($only_if eq q{$CIRRUS_TAG != ''}) {
            $label .= "[only if tag]";
        }
        # PR #13114
        elsif ($only_if =~ /CIRRUS_CHANGE.*release.*bump/i) {
            $label .= "[only on release PR]";
        }
        # swagger
        elsif ($only_if =~ /CIRRUS_CHANGE_TITLE.*CI:BUILD.*CIRRUS_CRON.*multiarch/) {
            $label .= "[SKIP: CI:BUILD or cron-multiarch]";
        }
        else {
            $label .= "[only if: $only_if]";
        }
    }

    # Special case for manual (or other??) trigger type
    my $trigger = '';
    if (my $t = $task->{yml}{trigger_type}) {
        $trigger = "\\l(TRIGGER: " . uc($t) . ")";
    }

    # Special cases (also hardcoded) for tasks that are skipped.
    if (my $skip = $task->{yml}{skip}) {
        $shape = 'record';
        $label .= '|' if $label && $label !~ /SKIP/;
        my @reasons;
        push @reasons, 'BRANCH','TAG'  if $skip =~ /CIRRUS_PR.*CIRRUS_TAG/;
        push @reasons, 'TAG'           if $skip eq q{$CIRRUS_TAG != ''};
        push @reasons, 'CI:DOCS'       if $skip =~ /CI:DOCS/;
        if (@reasons) {
            $label .= join('', map { "[SKIP: $_]\\l" } @reasons);
        }
        else {
            $label .= "[SKIPPABLE: $skip]";
        }
    }

    $self->{_gv}{dot} .= "  \"$node\" [shape=$shape style=bold color=$color$fill fontcolor=$color";
    if ($label) {
        (my $nodename = $node) =~ s/_/ /g;
        $self->{_gv}{dot} .= " label=\"$nodename$trigger\\l\|$label\"";
    }
    $self->{_gv}{dot} .= "]\n";

    for my $dep ($task->depended_on_by) {
        my $c = $color;
        # For custom-override boxes, when FG is black or very light, use
        # background color for arrow.
        if ($c =~ /000000/ || $c =~ /f.f.f./) {
            if ($fill =~ /\"#([0-9a-f]{6})\"/) {
                $c = qq{"#$1"};
            }
        }
        $self->{_gv}{dot} .= "  \"$node\" -> \"$dep->{name}\" [color=$c]\n";
        $self->_draw_boxes($dep);
    }
}

###############################################################################
# BEGIN omg kludge for dealing with anchors
#
# https://www.perlmonks.org/?node_id=813443   - code stolen from here
# https://www.perlmonks.org/?node_id=1124136  - further context
#

sub mergekeys
{
    return _mergekeys($_[0], []);
}

sub _mergekeys
{
    my $ref = shift;
    my $resolveStack = shift;
    my $reftype = ref $ref;

    # If this hash or array is already on the resolution stack, then somewhere, a child data structure is trying to inherit from one of its parents,
    # and hence by extension trying to inherit itself.
    if ($reftype =~ /HASH|ARRAY/ and (grep $_ == $ref, @$resolveStack) > 0)
    {
        # Halt and catch fire, or store the cyclic reference and not process it further. Not complaining seems to
        # be the behaviour of ruby's YAML parser, so let's go for that.

        #die "Cyclic inheritance detected: ".($ref)." is already on the resolution stack!\n" .
        #    "Dump of cyclic data structure (may have inheritance already partially resolved):\n".Dumper($ref);
        return $ref;
    }

    if (ref($ref) eq 'HASH')
    {
        push @$resolveStack, $ref;
        if (exists $ref->{'<<'})
        {
            my $inherits = $ref->{'<<'}; # can be either a single href, or an array of hrefs
            die "Undefined value for merge key '<<' in ".Dumper($ref)
                unless defined $inherits; # catch edge cases that YAML::XS won't catch, like "<<: &foo"
            die "Merge key does not support merging non-hashmaps" unless ref($inherits) =~ /HASH|ARRAY/;
            $inherits = [$inherits] if ref($inherits) eq 'HASH'; # normalize for further processing

            # For each of the hashes/arrays we're inheriting, have them resolve their inheritance first before applying them onto ourselves.
            # Also, remove the '<<' reference only afterwards, since by recursion these will have already been removed from our inheritees,
            # and this also allows us to show the cyclic reference by dumping out the structure when we detect one.
            foreach my $inherit (@$inherits)
            {
                $inherit = _mergekeys($inherit, $resolveStack);

                # ** changed by esm **: shallow hash merge fails for
                #    remote_sys_aarch64 (as of 2022-11) because it just <<'s
                #    the entire local_sys_aarch64 including its env hash
                deepmerge($ref, $inherit);
            }
            delete $ref->{'<<'};
        }

        _mergekeys($_, $resolveStack) for (values %$ref);
        die "Fatal error: imbalanced recursion stack in _mergekeys. This likely implies a programming error and/or a YAML file from hell." unless pop(@$resolveStack) eq $ref;
    }
    elsif (ref($ref) eq 'ARRAY')
    {
        push @$resolveStack, $ref;
        _mergekeys($_, $resolveStack) for (@$ref);
        die "Fatal error: imbalanced recursion stack in _mergekeys. This likely implies a programming error and/or a YAML file from hell." unless pop(@$resolveStack) eq $ref;
    }

    return $ref;
}


###############
#  deepmerge  #  deep recursive merge for hashes; needed for cirrus matrices
###############
sub deepmerge {
    my ($ref, $inherit) = @_;

    for my $k (keys %$inherit) {
        my $r_ref = ref($ref->{$k})     || '';
        my $i_ref = ref($inherit->{$k}) || '';

        if ($i_ref eq 'HASH') {
            # Two hashes
            deepmerge($ref->{$k}, $inherit->{$k});
        }
        elsif ($i_ref eq 'ARRAY') {
            # Two arrays; this is how .cirrus.yml does matrix env settings
            $ref->{$k} //= [];
            for my $element (@{$inherit->{$k}}) {
                my $e_ref = ref($element) || '';
                if ($e_ref eq 'HASH') {
                    # The only situation we handle is a hashref with one
                    # key named 'env', whose value is a hash. If that ever
                    # changes, deal with it then.
                    my $e_formatted = format_env($element);

                    my $found;
                    for my $in_k (@{$ref->{$k}}) {
                        $found ||= (format_env($in_k) eq $e_formatted);
                    }
                    push @{$ref->{$k}}, $element unless $found;
                }
                elsif ($e_ref eq 'ARRAY') {
                    die "FIXME, deepmerge cannot handle arrays of arrays";
                }
                elsif (! grep { $_ eq $element } @{$ref->{$k}}) {
                    # ref is an array, but element is a scalar
                    push @{$ref->{$k}}, $element;
                }
            }
        }
        else {
            # i is scalar
            $r_ref eq '' or die;
            $ref->{$k} = $inherit->{$k};
        }
   }
}

################
#  format_env  #  Return an easily-compared string based on a hashref
################
sub format_env {
    my $href = shift;

    # href must be: { env => { foo => "bar", ... } }
    ref($href) eq 'HASH'
        or die "$ME: Internal error: format_env(): arg is not a hash";
    exists $href->{env}
        or die "$ME: Internal error: format_env(): arg does not have 'env' key";
    ref($href->{env}) eq 'HASH'
        or die "$ME: Internal error: format_env(): arg->{env} is not a hash";
    keys(%{$href}) == 1
        or die "$ME: Internal error: format_env(): %{arg} has too many keys";

    join("--", map {
        sprintf("%s=%s", $_, $href->{env}{$_})
    } sort keys %{$href->{env}});
}


# END   omg kludge for dealing with anchors
###############################################################################

1;
